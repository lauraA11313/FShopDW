{
	"name": "EvaluateSales",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceProducts",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "InputSales",
						"type": "DatasetReference"
					},
					"name": "Sales"
				},
				{
					"dataset": {
						"referenceName": "InputArrivals",
						"type": "DatasetReference"
					},
					"name": "Arrivals"
				},
				{
					"dataset": {
						"referenceName": "InputSales",
						"type": "DatasetReference"
					},
					"name": "Sales2"
				},
				{
					"dataset": {
						"referenceName": "InputArrivals",
						"type": "DatasetReference"
					},
					"name": "Arrivals2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TurnoverShop1",
						"type": "DatasetReference"
					},
					"name": "sinkTurnover1"
				},
				{
					"dataset": {
						"referenceName": "SalesMarginsShop2",
						"type": "DatasetReference"
					},
					"name": "sinkSalesMargShop2"
				},
				{
					"dataset": {
						"referenceName": "TurnoverShop2",
						"type": "DatasetReference"
					},
					"name": "sinkTurnover2"
				},
				{
					"dataset": {
						"referenceName": "SalesMarginsShop1",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "ProdIdandPrice"
				},
				{
					"name": "Shop1"
				},
				{
					"name": "JoinSoldProdNetPrice"
				},
				{
					"name": "MarginOnEachSale"
				},
				{
					"name": "CleanUp"
				},
				{
					"name": "totalMarginByProd"
				},
				{
					"name": "Shop1Arrivals"
				},
				{
					"name": "Join1"
				},
				{
					"name": "AmountSpentOnSupply"
				},
				{
					"name": "totalBoughtAndSpent"
				},
				{
					"name": "JoinSupplyAndMargins"
				},
				{
					"name": "ProdLeftAndTurnover"
				},
				{
					"name": "CleanUpMinProdId"
				},
				{
					"name": "Shop2Sales"
				},
				{
					"name": "Join2"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "totalMarginByProd2"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Shop2Arrivals"
				},
				{
					"name": "Join3"
				},
				{
					"name": "AmountSpentOnSupply2"
				},
				{
					"name": "TotalBoughtAndSpent2"
				},
				{
					"name": "JoinSupplyAndMargin2"
				},
				{
					"name": "ProdLeftAndTurnover2"
				},
				{
					"name": "Select2"
				}
			],
			"script": "source(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tcategory_id as integer,\n\t\tprice_net as decimal(18,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Products\nsource(output(\n\t\tid as integer,\n\t\tdatetime as timestamp,\n\t\tproduct_id as integer,\n\t\tshop_id as integer,\n\t\tqnty as integer,\n\t\tprice as decimal(18,2),\n\t\tcost as decimal(18,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Sales\nsource(output(\n\t\tid as integer,\n\t\tdatetime as timestamp,\n\t\tproduct_id as integer,\n\t\tshop_id as integer,\n\t\tqnty as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Arrivals\nsource(output(\n\t\tid as integer,\n\t\tdatetime as timestamp,\n\t\tproduct_id as integer,\n\t\tshop_id as integer,\n\t\tqnty as integer,\n\t\tprice as decimal(18,2),\n\t\tcost as decimal(18,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Sales2\nsource(output(\n\t\tid as integer,\n\t\tdatetime as timestamp,\n\t\tproduct_id as integer,\n\t\tshop_id as integer,\n\t\tqnty as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Arrivals2\nProducts select(mapColumn(\n\t\tid,\n\t\tprice_net\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProdIdandPrice\nSales filter(shop_id==1) ~> Shop1\nShop1, ProdIdandPrice join(product_id == ProdIdandPrice@id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSoldProdNetPrice\nJoinSoldProdNetPrice derive(marginOnSale = cost-(qnty*price_net)) ~> MarginOnEachSale\nMarginOnEachSale select(mapColumn(\n\t\tid = Sales@id,\n\t\tproduct_id,\n\t\tqnty,\n\t\tprice,\n\t\tcost,\n\t\tprice_net,\n\t\tmarginOnSale\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> CleanUp\nMarginOnEachSale aggregate(groupBy(product_id),\n\tmarginByProd = sum(marginOnSale),\n\t\tprodSold = sum(qnty)) ~> totalMarginByProd\nArrivals filter(shop_id==1) ~> Shop1Arrivals\nShop1Arrivals, ProdIdandPrice join(product_id == ProdIdandPrice@id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 derive(spentOnSingleSupply = multiply(qnty,price_net)) ~> AmountSpentOnSupply\nAmountSpentOnSupply aggregate(groupBy(product_id),\n\ttotalSpentOnProdSupply = sum(spentOnSingleSupply),\n\t\ttotalItemsBought = sum(qnty)) ~> totalBoughtAndSpent\ntotalBoughtAndSpent, totalMarginByProd join(totalBoughtAndSpent@product_id == totalMarginByProd@product_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSupplyAndMargins\nJoinSupplyAndMargins derive(prodLeftInSupply = minus(totalItemsBought,prodSold),\n\t\tturnoverCoeff = divide(marginByProd,totalSpentOnProdSupply)) ~> ProdLeftAndTurnover\nProdLeftAndTurnover select(mapColumn(\n\t\tproduct_id = totalBoughtAndSpent@product_id,\n\t\ttotalItemsBought,\n\t\ttotalSpentOnProdSupply,\n\t\tprodSold,\n\t\tprodLeftInSupply,\n\t\tmarginByProd,\n\t\tturnoverCoeff\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CleanUpMinProdId\nSales2 filter(shop_id==2) ~> Shop2Sales\nShop2Sales, ProdIdandPrice join(product_id == ProdIdandPrice@id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nJoin2 derive(marginOnSale2 = cost-(qnty*price_net)) ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(product_id),\n\tmarginByProd = sum(marginOnSale2),\n\t\tprodSold = sum(qnty)) ~> totalMarginByProd2\nDerivedColumn1 select(mapColumn(\n\t\tid = Sales2@id,\n\t\tproduct_id,\n\t\tqnty,\n\t\tprice,\n\t\tcost,\n\t\tprice_net,\n\t\tmarginOnSale2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nArrivals2 filter(shop_id==2) ~> Shop2Arrivals\nShop2Arrivals, ProdIdandPrice join(product_id == ProdIdandPrice@id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(spentOnSingleSupply = multiply(qnty,price_net)) ~> AmountSpentOnSupply2\nAmountSpentOnSupply2 aggregate(groupBy(product_id),\n\ttotalSpentOnProdSupply = sum(spentOnSingleSupply),\n\t\ttotalItemsBrought = sum(qnty)) ~> TotalBoughtAndSpent2\nTotalBoughtAndSpent2, totalMarginByProd2 join(TotalBoughtAndSpent2@product_id == totalMarginByProd2@product_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSupplyAndMargin2\nJoinSupplyAndMargin2 derive(prodLeftInSupply = totalItemsBrought-prodSold,\n\t\tturnoverCoeff = divide(marginByProd,totalSpentOnProdSupply)) ~> ProdLeftAndTurnover2\nProdLeftAndTurnover2 select(mapColumn(\n\t\tproduct_id = TotalBoughtAndSpent2@product_id,\n\t\ttotalSpentOnProdSupply,\n\t\ttotalItemsBrought,\n\t\tmarginByProd,\n\t\tprodSold,\n\t\tprodLeftInSupply,\n\t\tturnoverCoeff\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nCleanUpMinProdId sink(input(\n\t\tprod_id as integer,\n\t\ttotalItemsBought as integer,\n\t\ttotalSpentOnPSupply as decimal(18,2),\n\t\tprodSold as integer,\n\t\tprodLeftInSupply as integer,\n\t\tmarginByProd as decimal(18,2),\n\t\tturnoverCoef as decimal(18,4)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tprod_id = product_id,\n\t\ttotalItemsBought,\n\t\ttotalSpentOnPSupply = totalSpentOnProdSupply,\n\t\tprodSold,\n\t\tprodLeftInSupply,\n\t\tmarginByProd,\n\t\tturnoverCoef = turnoverCoeff\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkTurnover1\nSelect1 sink(input(\n\t\tid as integer,\n\t\tprod_id as integer,\n\t\tqnty as integer,\n\t\tprice as decimal(18,2),\n\t\tcost as decimal(18,2),\n\t\tpriceNet as decimal(18,2),\n\t\tmarginOnSale as decimal(18,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tid,\n\t\tprod_id = product_id,\n\t\tqnty,\n\t\tprice,\n\t\tcost,\n\t\tpriceNet = price_net,\n\t\tmarginOnSale = marginOnSale2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkSalesMargShop2\nSelect2 sink(input(\n\t\tprodId as integer,\n\t\ttotalSpentOnProdSupply as decimal(18,2),\n\t\ttotalItemsBought as integer,\n\t\tmarginByProd as decimal(18,2),\n\t\tprodSold as integer,\n\t\tprodLeftInSupply as integer,\n\t\tturnoverCoeff as decimal(18,4)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tprodId = product_id,\n\t\ttotalSpentOnProdSupply,\n\t\ttotalItemsBought = totalItemsBrought,\n\t\tmarginByProd,\n\t\tprodSold,\n\t\tprodLeftInSupply,\n\t\tturnoverCoeff\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkTurnover2\nCleanUp sink(input(\n\t\tprod_id as integer,\n\t\tqnty as integer,\n\t\tprice as decimal(18,2),\n\t\tcost as decimal(18,2),\n\t\tpriceNet as decimal(18,2),\n\t\tmarginOnSale as decimal(18,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tprod_id = product_id,\n\t\tqnty,\n\t\tprice,\n\t\tcost,\n\t\tpriceNet = price_net,\n\t\tmarginOnSale\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink4"
		}
	}
}